#!/usr/bin/env node

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { 
  CallToolRequestSchema,
  ListToolsRequestSchema,
  ListResourcesRequestSchema,
  ReadResourceRequestSchema,
  ListPromptsRequestSchema,
  GetPromptRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

// „Çµ„Éº„Éê„Éº„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
const server = new Server(
  {
    name: 'basic-mcp-server-jp',
    version: '1.0.0',
  },
  {
    capabilities: {
      tools: {},
      resources: {},
      prompts: {},
    },
  },
);

// „ÉÑ„Éº„É´‰∏ÄË¶ß„ÇíÊèê‰æõ
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: 'hello',
        description: '„Ç∑„É≥„Éó„É´„Å™Êå®Êã∂„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËøî„Åó„Åæ„Åô',
        inputSchema: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              description: 'Êå®Êã∂„Åô„ÇãÁõ∏Êâã„ÅÆÂêçÂâç',
            },
          },
          required: ['name'],
        },
      },
      {
        name: 'calculate',
        description: 'Âü∫Êú¨ÁöÑ„Å™Êï∞Â≠¶Ë®àÁÆó„ÇíÂÆüË°å„Åó„Åæ„Åô',
        inputSchema: {
          type: 'object',
          properties: {
            expression: {
              type: 'string',
              description: 'Ë®àÁÆóÂºèÔºà‰æã: 2 + 2, 10 * 5Ôºâ',
            },
          },
          required: ['expression'],
        },
      },
      {
        name: 'current_time',
        description: 'ÁèæÂú®„ÅÆÊó•ÊôÇ„ÇíÂèñÂæó„Åó„Åæ„Åô',
        inputSchema: {
          type: 'object',
          properties: {
            format: {
              type: 'string',
              description: 'ÊôÇÂàª„ÅÆË°®Á§∫ÂΩ¢ÂºèÔºàISO„ÄÅÊó•Êú¨Ë™ûÔºâ',
              enum: ['iso', 'japanese'],
              default: 'iso',
            },
          },
        },
      },
    ],
  };
});

// „ÉÑ„Éº„É´„ÅÆÂÆüË°å„ÇíÂá¶ÁêÜ
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;
  
  try {
    switch (name) {
      case 'hello':
        const { name: personName } = args;
        return {
          content: [
            {
              type: 'text',
              text: `„Åì„Çì„Å´„Å°„ÅØ„ÄÅ${personName}„Åï„ÇìÔºÅMCP„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅîÊå®Êã∂„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„Åô„ÄÇ`,
            },
          ],
        };
      
      case 'calculate':
        const { expression } = args;
        // ÂÆâÂÖ®„Å™Ë®àÁÆó„ÅÆ„Åü„ÇÅ„ÄÅÂü∫Êú¨ÁöÑ„Å™ÊºîÁÆó„ÅÆ„ÅøË®±ÂèØ
        const safeExpression = expression.replace(/[^0-9+\-*/().\s]/g, '');
        if (safeExpression !== expression) {
          throw new Error('Ë®àÁÆóÂºè„Å´ÁÑ°Âäπ„Å™ÊñáÂ≠ó„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô');
        }
        
        const result = eval(safeExpression);
        return {
          content: [
            {
              type: 'text',
              text: `Ë®àÁÆóÁµêÊûú: ${expression} = ${result}`,
            },
          ],
        };
      
      case 'current_time':
        const { format = 'iso' } = args;
        const now = new Date();
        
        let timeString;
        if (format === 'japanese') {
          timeString = now.toLocaleString('ja-JP', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            weekday: 'long',
          });
        } else {
          timeString = now.toISOString();
        }
        
        return {
          content: [
            {
              type: 'text',
              text: `ÁèæÂú®ÊôÇÂàª: ${timeString}`,
            },
          ],
        };
      
      default:
        throw new Error(`‰∏çÊòé„Å™„ÉÑ„Éº„É´: ${name}`);
    }
  } catch (error) {
    return {
      content: [
        {
          type: 'text',
          text: `„Ç®„É©„Éº: ${error.message}`,
        },
      ],
      isError: true,
    };
  }
});

// „É™„ÇΩ„Éº„Çπ‰∏ÄË¶ß„ÇíÊèê‰æõ
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: 'text://welcome',
        name: '„Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏',
        description: '„Çµ„Éº„Éê„Éº„ÅÆ„Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏',
        mimeType: 'text/plain',
      },
      {
        uri: 'json://server_info',
        name: '„Çµ„Éº„Éê„ÉºÊÉÖÂ†±',
        description: 'MCP„Çµ„Éº„Éê„Éº„ÅÆË©≥Á¥∞ÊÉÖÂ†±',
        mimeType: 'application/json',
      },
    ],
  };
});

// „É™„ÇΩ„Éº„Çπ„ÅÆË™≠„ÅøÂèñ„Çä„ÇíÂá¶ÁêÜ
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
  const { uri } = request.params;
  
  switch (uri) {
    case 'text://welcome':
      return {
        contents: [
          {
            uri,
            mimeType: 'text/plain',
            text: 'MCP„Éô„Éº„Ç∑„ÉÉ„ÇØ„Çµ„Éº„Éê„Éº„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ\n\n„Åì„ÅÆ„Çµ„Éº„Éê„Éº„ÅØÂ≠¶ÁøíÁõÆÁöÑ„Åß‰ΩúÊàê„Åï„Çå„Å¶„Åä„Çä„ÄÅ‰ª•‰∏ã„ÅÆÊ©üËÉΩ„ÇíÊèê‰æõ„Åó„Åæ„ÅôÔºö\n- Êå®Êã∂„ÉÑ„Éº„É´\n- Ë®àÁÆó„ÉÑ„Éº„É´\n- ÊôÇÂàªÂèñÂæó„ÉÑ„Éº„É´\n\nË©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ„ÉÑ„Éº„É´‰∏ÄË¶ß„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ',
          },
        ],
      };
    
    case 'json://server_info':
      const serverInfo = {
        name: 'Basic MCP Server (Japanese)',
        version: '1.0.0',
        description: 'MCPÂ≠¶ÁøíÁî®„ÅÆÂü∫Êú¨ÁöÑ„Å™„Çµ„Éº„Éê„ÉºÂÆüË£Ö',
        author: 'MCP Learning Team',
        capabilities: ['tools', 'resources', 'prompts'],
        supported_languages: ['Japanese', 'English'],
        created_at: new Date().toISOString(),
      };
      
      return {
        contents: [
          {
            uri,
            mimeType: 'application/json',
            text: JSON.stringify(serverInfo, null, 2),
          },
        ],
      };
    
    default:
      throw new Error(`„É™„ÇΩ„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${uri}`);
  }
});

// „Éó„É≠„É≥„Éó„Éà‰∏ÄË¶ß„ÇíÊèê‰æõ
server.setRequestHandler(ListPromptsRequestSchema, async () => {
  return {
    prompts: [
      {
        name: 'greeting',
        description: 'ÈÅ©Âàá„Å™Êå®Êã∂„ÇíÁîüÊàê„Åô„Çã„Åü„ÇÅ„ÅÆ„Éó„É≠„É≥„Éó„Éà',
        arguments: [
          {
            name: 'name',
            description: 'Êå®Êã∂„Åô„ÇãÁõ∏Êâã„ÅÆÂêçÂâç',
            required: true,
          },
          {
            name: 'time_of_day',
            description: 'ÊôÇÈñìÂ∏ØÔºàÊúù„ÄÅÊòº„ÄÅÂ§úÔºâ',
            required: false,
          },
        ],
      },
    ],
  };
});

// „Éó„É≠„É≥„Éó„Éà„ÅÆÂèñÂæó„ÇíÂá¶ÁêÜ
server.setRequestHandler(GetPromptRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;
  
  if (name === 'greeting') {
    const { name: personName, time_of_day } = args;
    
    let greeting = '';
    if (time_of_day === 'Êúù') {
      greeting = '„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô';
    } else if (time_of_day === 'Â§ú') {
      greeting = '„Åì„Çì„Å∞„Çì„ÅØ';
    } else {
      greeting = '„Åì„Çì„Å´„Å°„ÅØ';
    }
    
    return {
      description: '‰∏ÅÂØß„Å™Êå®Êã∂„Éó„É≠„É≥„Éó„Éà',
      messages: [
        {
          role: 'user',
          content: {
            type: 'text',
            text: `${greeting}„ÄÅ${personName}„Åï„Çì„ÄÇÊú¨Êó•„ÅØ„ÅäÂøô„Åó„ÅÑ‰∏≠„ÄÅ„ÅäÊôÇÈñì„Çí„ÅÑ„Åü„Å†„Åç„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ‰Ωï„Åã„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„ÅØ„Åî„Åñ„ÅÑ„Åæ„Åô„Åß„Åó„Çá„ÅÜ„ÅãÔºü`,
          },
        },
      ],
    };
  }
  
  throw new Error(`‰∏çÊòé„Å™„Éó„É≠„É≥„Éó„Éà: ${name}`);
});

// „Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error('üöÄ Basic MCP Server (Êó•Êú¨Ë™ûÁâà) „ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü');
}

main().catch((error) => {
  console.error('‚ùå „Çµ„Éº„Éê„Éº„Ç®„É©„Éº:', error);
  process.exit(1);
});